// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using WhatsForDinner.JsonModels;
using WhatsForDinner.Presenters;
using WhatsForDinner.Presenters.Contracts;
using WhatsForDinner.TableViewCells;
using WhatsForDinner.TableViewSources;
using WhatsForDinner.ViewControllers.Contracts;
using static WhatsForDinner.Constants.SortConstants;

namespace WhatsForDinner.ViewControllers
{
    public partial class RecipesViewController : BaseWhatsForDinnerViewController, RecipesViewControllerInterface
    {
        public Action<int> RecipeSelected
        {
            get
            {
                return (RecipesTableView.Source as RecipesTableViewSource).RecipeSelected;
            }
            set
            {
                (RecipesTableView.Source as RecipesTableViewSource).RecipeSelected = value;
            }
        }
        public Action SortButtonClicked { get; set; }
        public Action<RecipeByIngredientSort> SortChoiceClicked { get; set; }
        public RecipeByIngredientJsonModel[] Recipes { get; set; }
        RecipesPresenterInterface Presenter = new RecipesPresenter();


        public RecipesViewController(IntPtr handle) : base(handle)
        {
        }
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var sortButton = new UIBarButtonItem();
            sortButton.Image = UIImage.FromFile("sort.png");
            sortButton.Clicked += SortButton_Clicked;
            NavigationItem.RightBarButtonItem = sortButton;

            RecipesTableView.RegisterNibForCellReuse(RecipeTableViewCell.Nib, RecipeTableViewCell.Key);
            RecipesTableView.Source = new RecipesTableViewSource(this);
            Presenter.BindToView(this, Recipes);
        }
        private void SortButton_Clicked(object sender, EventArgs e)
        {
            SortButtonClicked?.Invoke();
        }
        public void ShowSortMenu()
        {
            UIAlertController actionSheet = UIAlertController.Create("Sort By:", null, UIAlertControllerStyle.ActionSheet);
            var sortTypesList = new List<string>() { "Recipe Name", "Recipe Likes", "Missing Ingredients", "Used Ingredients" };
            foreach (var sortType in sortTypesList)
            {
                UIAlertAction alertButton = UIAlertAction.Create(sortType, UIAlertActionStyle.Default, (alertAction) =>
                {
                    var enumString = sortType.Replace(" ", "");
                    SortChoiceClicked?.Invoke((RecipeByIngredientSort)Enum.Parse(typeof(RecipeByIngredientSort), enumString));
                });
                actionSheet.AddAction(alertButton);
            }
            UIAlertAction cancelButton = UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (obj) => { });
            actionSheet.AddAction(cancelButton);
            if (actionSheet.PopoverPresentationController != null)
            {
                actionSheet.PopoverPresentationController.SourceView = this.View;
            }
            PresentViewController(actionSheet, true, null);
        }
        public void MoveToRecipeViewController(RecipeJsonModel recipe, IngredientJsonModel[] missingIngredients, IngredientJsonModel[] usedIngredients)
        {
            InvokeOnMainThread(() => NavigationController.PushViewController(ControllerFactory.GetRecipeViewController(Storyboard, recipe, missingIngredients, usedIngredients), false));
        }
    }
}
